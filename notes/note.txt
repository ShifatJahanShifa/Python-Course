** In other words, a script is a program that is short, simple, and can be written very quickly.
** Automation is the process of replacing a manual step with one that happens automatically.
** Automation can: It can save time, reduce errors, increase consistency, and provide a way to centralize solutions and mistakes, making them easier to fix.
** Python can also run on a variety of machines, such as servers, workstations, PCs, mobile devices, IoT, and more.

** Python is: üòç

a general purpose scripting language;

a popular language used to code a variety of applications;

a frequently used tool for automation;

a cross-platform compatible language;

a beginner-friendly language.

** Python is not: 

a platform-specific / OS-specific scripting language;

a client-side scripting language;

a purely object-oriented programming language.

** Client-side scripting language - Client-side scripting languages, like JavaScript, are used mostly for web programming. The scripts are transferred from a web server to the end-user‚Äôs internet browser, then executed in the browser.


** Order of operations
The order of operations are to be calculated from left to right in the following order: 

Parentheses ( ), { }, [ ]

Exponents xe   (x**e)

Multiplication * and Division /  

Addition + and Subtraction -    

 You might find the PEMDAS mnemonic device to be helpful in remembering the order.   
 
 
 ** In Python, text in between quotes -- either single or double quotes -- is a string data type. 
 ** explicit conversion - when code is written to manually convert one data type to another using a data type conversion function:

str() - converts a value (often numeric) to a string data type

int() - converts a value (usually a float) to an integer data type

float() - converts a value (usually an integer) to a float data type

#### 

The ** operator. To program 25 we do 2 ** 5.
The built-in pow() function. 23 coded becomes pow(2, 3).
The math.pow() function. To calculate 35, we do math.pow(3, 5).

use pow() if you need an integer outcome and math.pow() for a floating-point result.

**** pow() can also accept three arguments. In that case the third argument specifies the modulo of the exponentiation (Python Docs, n.d. a). That returns the remainder of exponentiation. Using pow() in that way is more efficient than the equivalent pow(base, exp) % mod. 



